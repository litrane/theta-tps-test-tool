// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT20TokenBankMetaData contains all meta data concerning the TNT20TokenBank contract.
var TNT20TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToSendTFuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"forceIncrementMaxProcessedTokenLockNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"forceIncrementMaxProcessedVoucherBurnNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"getAdjustedValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getTokenLockEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getVoucherBurnEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200551c3803806200551c833981016040819052620000349162000064565b6001600081905591909155600280546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b61546980620000b36000396000f3fe6080604052600436106200018b5760003560e01c80638883931e11620000dd578063ca2075691162000084578063ca207569146200058b578063ccf187c714620005bc578063dd17eb6d14620005ed578063ebda99621462000629578063f6a3d24e146200064e578063f95627ac146200068e578063feaff05214620006bf57600080fd5b80638883931e14620004885780639d3a0f0c14620004b9578063a0df5cc514620004de578063a2cc698114620004f5578063aa861c15146200051a578063b4baab85146200054f578063bff4c41a146200057457600080fd5b80633f1a8aa811620001425780633f1a8aa81462000320578063588b1408146200035c57806360569b5e14620003905780636ac739b914620003c5578063740cb7f81462000401578063766f8fb014620004325780637ff75b46146200046357600080fd5b8063060cb5521462000190578063073b950214620001b75780631527b14d14620001e25780631eb787371462000253578063261a323e14620002ac57806327ca4df114620002e2575b600080fd5b3480156200019d57600080fd5b50620001b5620001af3660046200386d565b62000702565b005b348015620001c457600080fd5b50620001cf60015481565b6040519081526020015b60405180910390f35b348015620001ef57600080fd5b506200023362000201366004620036e4565b8051602081830181018051600d825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b039093168352901515602083015201620001d9565b3480156200026057600080fd5b506200029662000272366004620039a1565b600b6020908152600092835260408084209091529082529020805460029091015482565b60408051928352602083019190915201620001d9565b348015620002b957600080fd5b50620002d1620002cb366004620036e4565b620007c8565b6040519015158152602001620001d9565b348015620002ef57600080fd5b506200030762000301366004620038be565b6200080c565b6040516001600160a01b039091168152602001620001d9565b3480156200032d57600080fd5b50620001cf6200033f366004620038f2565b601160209081526000928352604080842090915290825290205481565b3480156200036957600080fd5b50620003816200037b366004620038be565b62000837565b604051620001d9919062003d76565b3480156200039d57600080fd5b50620003b5620003af36600462003567565b620008ec565b604051620001d992919062003edd565b348015620003d257600080fd5b50620001cf620003e4366004620039a1565b600091825260086020908152604080842092845291905290205490565b3480156200040e57600080fd5b50620001cf62000420366004620038be565b60066020526000908152604090205481565b3480156200043f57600080fd5b50620001cf62000451366004620038be565b6000908152600a602052604090205490565b3480156200047057600080fd5b50620001b562000482366004620039c4565b6200099b565b3480156200049557600080fd5b50620001cf620004a7366004620038be565b60036020526000908152604090205481565b348015620004c657600080fd5b50620001b5620004d83660046200379b565b62000c91565b620001b5620004ef366004620035a7565b62000f7e565b3480156200050257600080fd5b506200030762000514366004620036e4565b6200131f565b3480156200052757600080fd5b506200053f62000539366004620039a1565b62001395565b604051620001d992919062003cfb565b3480156200055c57600080fd5b50620001b56200056e3660046200386d565b6200164f565b620001b56200058536600462003925565b620016fd565b3480156200059857600080fd5b50620001cf620005aa366004620038be565b60056020526000908152604090205481565b348015620005c957600080fd5b50620001cf620005db366004620038be565b60046020526000908152604090205481565b348015620005fa57600080fd5b50620001cf6200060c366004620039a1565b600091825260076020908152604080842092845291905290205490565b3480156200063657600080fd5b50620003816200064836600462003567565b62001bdc565b3480156200065b57600080fd5b50620002d16200066d36600462003567565b6001600160a01b03166000908152600e602052604090206001015460ff1690565b3480156200069b57600080fd5b50620001cf620006ad366004620038be565b60009081526009602052604090205490565b348015620006cc57600080fd5b5062000296620006de366004620039a1565b600c6020908152600092835260408084209091529082529020805460029091015482565b60026000541415620007315760405162461bcd60e51b8152600401620007289062003fe9565b60405180910390fd5b60026000908155620007438462001cdc565b9050600080620007538362001cef565b9150915080620007775760405162461bcd60e51b8152600401620007289062003fa5565b60008284878760405160200162000792949392919062003c48565b604051602081830303815290604052805190602001209050620007b9838783883362001d80565b50506001600055505050505050565b600080620007d68362001cdc565b9050600d81604051620007ea919062003a8c565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600f81815481106200081d57600080fd5b6000918252602090912001546001600160a01b0316905081565b601081815481106200084857600080fd5b906000526020600020016000915090508054620008659062004233565b80601f0160208091040260200160405190810160405280929190818152602001828054620008939062004233565b8015620008e45780601f10620008b857610100808354040283529160200191620008e4565b820191906000526020600020905b815481529060010190602001808311620008c657829003601f168201915b505050505081565b600e60205260009081526040902080548190620009099062004233565b80601f0160208091040260200160405190810160405280929190818152602001828054620009379062004233565b8015620009885780601f106200095c5761010080835404028352916020019162000988565b820191906000526020600020905b8154815290600101906020018083116200096a57829003601f168201915b5050506001909301549192505060ff1682565b60026000541415620009c15760405162461bcd60e51b8152600401620007289062003fe9565b60026000556001600160a01b038416620009ef5760405162461bcd60e51b8152600401620007289062003f03565b6000620009fc8662001cdc565b905060008062000a0c8362001d9f565b915091508062000a755760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b606482015260840162000728565b60008981526011602090815260408083206001600160a01b038616845290915290205486111562000afe5760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420616d6f7560448201526b6e74206f6620746f6b656e7360a01b606482015260840162000728565b60008984888a898960405160200162000b1d9695949392919062003bf7565b604051602081830303815290604052805190602001209050600062000b468b8884893362001e20565b9050801562000c7f5760008b81526011602090815260408083206001600160a01b038816845290915290205462000b7e908962001e35565b60008c81526011602090815260408083206001600160a01b038916808552925291829020929092555163a9059cbb60e01b815263a9059cbb9062000bc9908c908c9060040162003ce2565b602060405180830381600087803b15801562000be457600080fd5b505af115801562000bf9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1f9190620036c6565b5062000c2b8b62001e4a565b60008b815260046020526040908190205490517f189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb9062000c759088908d908d908c90879062003e9b565b60405180910390a1505b50506001600055505050505050505050565b6002600054141562000cb75760405162461bcd60e51b8152600401620007289062003fe9565b60026000556001600160a01b03841662000ce55760405162461bcd60e51b8152600401620007289062003f03565b600062000cf28962001cdc565b905060008062000d028362001cef565b915091508062000d265760405162461bcd60e51b8152600401620007289062003fa5565b600082848c8c8c8c8c8c8c60405160200162000d4b9998979695949392919062003b63565b604051602081830303815290604052805190602001209050600062000d74848884893362001e73565b9050801562000f6a5760405163130d191f60e11b8152309063261a323e9062000da290889060040162003d76565b60206040518083038186803b15801562000dbb57600080fd5b505afa15801562000dd0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000df69190620036c6565b62000e145762000e148562000e0e878f8f8f62001e88565b62001f2a565b60405163a2cc698160e01b8152600090309063a2cc69819062000e3c90899060040162003d76565b60206040518083038186803b15801562000e5557600080fd5b505afa15801562000e6a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e90919062003587565b90506001600160a01b03811662000efb5760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b606482015260840162000728565b62000f08818b8b62002154565b62000f1385620021c0565b600085815260066020526040908190205490517f5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf089062000f5f9089908e9086908f908e90889062003dcd565b60405180910390a150505b505060016000555050505050505050505050565b6002600054141562000fa45760405162461bcd60e51b8152600401620007289062003fe9565b60026000556001600160a01b03821662000fd25760405162461bcd60e51b8152600401620007289062003f03565b6040516375ed4cb160e11b81526001600160a01b0384166004820152600090309063ebda99629060240160006040518083038186803b1580156200101557600080fd5b505afa1580156200102a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200105491908101906200371c565b9050805160001415620010c25760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b606482015260840162000728565b60405163130d191f60e11b8152309063261a323e90620010e790849060040162003d76565b60206040518083038186803b1580156200110057600080fd5b505afa15801562001115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200113b9190620036c6565b620011895760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f7420657869737400604482015260640162000728565b3362001197858285620021e1565b600080620011a58462001cef565b91509150806200120b5760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b606482015260840162000728565b620012168262002213565b600082815260056020526040908190205490517f8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d906200126090879087908b908b90879062003d8b565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620012b757600080fd5b505afa158015620012cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012f29190620038d8565b341015620013145760405162461bcd60e51b8152600401620007289062003f3a565b620007b9836200225e565b6000806200132d8362001cdc565b90506000600d8260405162001343919062003a8c565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff161580159282019290925291506200138b57519392505050565b5060009392505050565b6060806000600154461490506000600260009054906101000a90046001600160a01b03166001600160a01b031663a7464b126040518163ffffffff1660e01b815260040160206040518083038186803b158015620013f257600080fd5b505afa15801562001407573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200142d9190620038d8565b600254604051632f2c13b560e01b81526004810189905291925060009182916001600160a01b031690632f2c13b590602401604080518083038186803b1580156200147757600080fd5b505afa1580156200148c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014b2919062003972565b915091506000818015620014d15750620014cd8885620026af565b8310155b8015620014f55750620014f284620014eb8a6001620026bd565b90620026af565b83105b9050848015620015025750805b15620015b357600062001517896001620026bd565b6002546040516343f27e4560e01b8152600481018d9052602481018390529192506001600160a01b0316906343f27e459060440160006040518083038186803b1580156200156457600080fd5b505afa15801562001579573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620015a39190810190620035ed565b9750975050505050505062001648565b6002546040516343f27e4560e01b8152600481018b9052602481018a90526001600160a01b03909116906343f27e459060440160006040518083038186803b158015620015ff57600080fd5b505afa15801562001614573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200163e9190810190620035ed565b9650965050505050505b9250929050565b60026000541415620016755760405162461bcd60e51b8152600401620007289062003fe9565b60026000908155620016878462001cdc565b9050600080620016978362001cef565b9150915080620016bb5760405162461bcd60e51b8152600401620007289062003fa5565b600082848787604051602001620016d6949392919062003c48565b604051602081830303815290604052805190602001209050620007b98387838833620026cb565b60026000541415620017235760405162461bcd60e51b8152600401620007289062003fe9565b60026000556001600160a01b038216620017515760405162461bcd60e51b8152600401620007289062003f03565b600154841480620017dd57506002546040516343b71f0560e01b8152600481018690526001600160a01b03909116906343b71f059060240160206040518083038186803b158015620017a257600080fd5b505afa158015620017b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017dd9190620036c6565b620018275760405162461bcd60e51b81526020600482015260196024820152781b9bdd0818481d985b1a59081d185c99d95d10da185a5b9251603a1b604482015260640162000728565b6040516323b872dd60e01b81523360048201523060248201526044810182905283906001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156200187857600080fd5b505af11580156200188d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018b39190620036c6565b506000620018f24660405180604001604052806002815260200161032360f41b815250620018ec886001600160a01b03166014620026e0565b62002899565b60008781526011602090815260408083206001600160a01b038a168452909152902054909150620019249084620026bd565b60008781526011602090815260408083206001600160a01b038a1684529091529020556200195286620028dd565b6000600360008881526020019081526020016000205490507fe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb8233898888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620019ca57600080fd5b505afa158015620019df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001a0991908101906200371c565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801562001a4357600080fd5b505afa15801562001a58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001a8291908101906200371c565b8a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562001abc57600080fd5b505afa15801562001ad1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af7919062003a3e565b8960405162001b0f9998979695949392919062003e17565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b6657600080fd5b505afa15801562001b7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ba19190620038d8565b34101562001bc35760405162461bcd60e51b8152600401620007289062003f3a565b62001bce876200225e565b505060016000555050505050565b6001600160a01b0381166000908152600e6020526040808220815180830190925280546060939291908290829062001c149062004233565b80601f016020809104026020016040519081016040528092919081815260200182805462001c429062004233565b801562001c935780601f1062001c675761010080835404028352916020019162001c93565b820191906000526020600020905b81548152906001019060200180831162001c7557829003601f168201915b50505091835250506001919091015460ff1615156020918201528101519091501562001cc0575192915050565b5050604080516020810190915260008152919050565b50919050565b606062001ce98262002928565b92915050565b60008060008062001d0785602f60f81b6001620029ae565b915091508062001d1e575060009485945092505050565b60008062001d2f8760008662002a4a565b915091508062001d485750600096879650945050505050565b60008062001d568462002b6c565b915091508062001d7157506000988998509650505050505050565b50976001975095505050505050565b600062001d958686868686600a600c62002c54565b9695505050505050565b60008060008062001db785602f60f81b6002620029ae565b915091508062001dce575060009485945092505050565b60008062001deb8762001de3866001620040d1565b895162002a4a565b915091508062001e045750600096879650945050505050565b600062001e118362002c75565b98600198509650505050505050565b600062001d958686868686600a600c62002e90565b600062001e438284620041aa565b9392505050565b600081815260046020526040812080546001929062001e6b908490620040d1565b909155505050565b600062001d9586868686866009600b62002e90565b60008030905060008560405160200162001ea3919062003aaa565b604051602081830303815290604052905060008560405160200162001ec9919062003b38565b60405160208183030381529060405290506000838984848960405162001eef90620033bd565b62001eff95949392919062003c7c565b604051809103906000f08015801562001f1c573d6000803e3d6000fd5b509998505050505050505050565b600062001f378362001cdc565b60405163130d191f60e11b8152909150309063261a323e9062001f5f90849060040162003d76565b60206040518083038186803b15801562001f7857600080fd5b505afa15801562001f8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fb39190620036c6565b156200200d5760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b606482015260840162000728565b6040805180820182526001600160a01b0384168152600160208201529051600d906200203b90849062003a8c565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600e8452208151805192939192620020ad9284920190620033cb565b506020918201516001918201805460ff1916911515919091179055600f80548083019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b03861617905560108054918201815560005282516200214e927f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290920191840190620033cb565b50505050565b6040516340c10f1960e01b815283906001600160a01b038216906340c10f199062002186908690869060040162003ce2565b600060405180830381600087803b158015620021a157600080fd5b505af1158015620021b6573d6000803e3d6000fd5b5050505050505050565b600081815260066020526040812080546001929062001e6b908490620040d1565b604051632770a7eb60e21b815283906001600160a01b03821690639dc29fac9062002186908690869060040162003ce2565b600081815260056020526040812080546001929062002234908490620040d1565b90915550506000908152600860209081526040808320600583528184205484529091529020439055565b60006200226b826200322a565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620022be57600080fd5b505afa158015620022d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022f99190620038d8565b9050806200230657505050565b6002546040805163dba9de6b60e01b8152815160009384936001600160a01b039091169263dba9de6b9260048083019392829003018186803b1580156200234c57600080fd5b505afa15801562002361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002387919062003972565b9150915080620023d25760405162461bcd60e51b81526020600482015260156024820152746661696c656420746f206765742064796e6173747960581b604482015260640162000728565b600080620023e1868562001395565b8151919350915080620023f8575050505050505050565b808251146200245c5760405162461bcd60e51b815260206004820152602960248201527f76616c696461746f7220616e6420736861726520616d6f756e7420636f756e74604482015268040dad2e6dac2e8c6d60bb1b606482015260840162000728565b6000805b82811015620024b1576200249a848281518110620024825762002482620042cb565b602002602001015183620026bd90919063ffffffff16565b915080620024a8816200426a565b91505062002460565b5080620024c357505050505050505050565b8660005b83811015620025e05760006200250f8462002508888581518110620024f057620024f0620042cb565b60200260200101518d620026af90919063ffffffff16565b9062003247565b9050868281518110620025265762002526620042cb565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050620025bb578682815181106200256f576200256f620042cb565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f488582604051620025b291815260200190565b60405180910390a25b620025c7838262001e35565b9250508080620025d7906200426a565b915050620024c7565b5084620025ef600185620041aa565b81518110620026025762002602620042cb565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050620026a3578462002644600185620041aa565b81518110620026575762002657620042cb565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885826040516200269a91815260200190565b60405180910390a25b50505050505050505050565b600062001e4382846200415d565b600062001e438284620040d1565b600062001d9586868686866009600b62002c54565b60606000620026f18360026200415d565b620026fe906002620040d1565b6001600160401b03811115620027185762002718620042e1565b6040519080825280601f01601f19166020018201604052801562002743576020820181803683370190505b509050600360fc1b81600081518110620027615762002761620042cb565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620027935762002793620042cb565b60200101906001600160f81b031916908160001a9053506000620027b98460026200415d565b620027c6906001620040d1565b90505b600181111562002848576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620027fe57620027fe620042cb565b1a60f81b828281518110620028175762002817620042cb565b60200101906001600160f81b031916908160001a90535060049490941c93620028408162004219565b9050620027c9565b50831562001e435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000728565b6060620028d5620028aa8562003255565b8484604051602001620028c09392919062003ad8565b60405160208183030381529060405262001cdc565b949350505050565b6000818152600360205260408120805460019290620028fe908490620040d1565b90915550506000908152600760209081526040808320600383528184205484529091529020439055565b60608160005b8151811015620029a75762002966828281518110620029515762002951620042cb565b01602001516001600160f81b0319166200336a565b8282815181106200297b576200297b620042cb565b60200101906001600160f81b031916908160001a905350806200299e816200426a565b9150506200292e565b5092915050565b82516000908190859082805b8281101562002a3657876001600160f81b031916848281518110620029e357620029e3620042cb565b01602001516001600160f81b031916141562002a215762002a06600183620040d1565b91508682141562002a215794506001935062002a4292505050565b8062002a2d816200426a565b915050620029ba565b50600080945094505050505b935093915050565b82516060906000908484101562002a765750506040805160208101909152600080825290915062002a42565b8084111562002a9a5750506040805160208101909152600080825290915062002a42565b85600062002aa9868862001e35565b6001600160401b0381111562002ac35762002ac3620042e1565b6040519080825280601f01601f19166020018201604052801562002aee576020820181803683370190505b509050865b8681101562001d715782818151811062002b115762002b11620042cb565b01602001516001600160f81b0319168262002b2d838b62001e35565b8151811062002b405762002b40620042cb565b60200101906001600160f81b031916908160001a9053508062002b63816200426a565b91505062002af3565b80516000908190839082805b8281101562002c4757603084828151811062002b985762002b98620042cb565b016020015160f81c1080159062002bcc5750603984828151811062002bc15762002bc1620042cb565b016020015160f81c11155b1562002c235762002bdf82600a620026af565b915062002c1b603085838151811062002bfc5762002bfc620042cb565b016020015162002c10919060f81c620041c4565b839060ff16620026bd565b915062002c32565b50600096879650945050505050565b8062002c3e816200426a565b91505062002b78565b5095600195509350505050565b600062002c678888888888888862002e90565b90505b979650505050505050565b60008181808060025b602a81101562002e855762002c96610100856200412b565b935084818151811062002cad5762002cad620042cb565b016020015160f81c92508462002cc5826001620040d1565b8151811062002cd85762002cd8620042cb565b016020015160f81c915060616001600160a01b0384161080159062002d0757506066836001600160a01b031611155b1562002d225762002d1a6057846200417f565b925062002d95565b6041836001600160a01b03161015801562002d4757506046836001600160a01b031611155b1562002d5a5762002d1a6037846200417f565b6030836001600160a01b03161015801562002d7f57506039836001600160a01b031611155b1562002d955762002d926030846200417f565b92505b6061826001600160a01b03161015801562002dba57506066826001600160a01b031611155b1562002dd55762002dcd6057836200417f565b915062002e48565b6041826001600160a01b03161015801562002dfa57506046826001600160a01b031611155b1562002e0d5762002dcd6037836200417f565b6030826001600160a01b03161015801562002e3257506039826001600160a01b031611155b1562002e485762002e456030836200417f565b91505b8162002e568460106200412b565b62002e629190620040a3565b62002e6e9085620040a3565b935062002e7d600282620040d1565b905062002c7e565b509195945050505050565b600060015488148062002f1e57506002546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f059060240160206040518083038186803b15801562002ee357600080fd5b505afa15801562002ef8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f1e9190620036c6565b62002f5e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b604482015260640162000728565b60008881526020849052604090205462002f7a906001620040d1565b851462002f8a5750600062002c6a565b600088815260208381526040808320898452909152812060015460609081908c9081141562002fb65750465b62002fc2818d62001395565b9350915060005b82518110156200313657896001600160a01b031683828151811062002ff25762002ff2620042cb565b60200260200101516001600160a01b0316146200300f5762003121565b6001955060005b6001860154811015620030b9578560010181815481106200303b576200303b620042cb565b6000918252602090912001546001600160a01b038c811691161415620030a45760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f74656400000000604482015260640162000728565b80620030b0816200426a565b91505062003016565b508c85556001808601805491820181556000908152602090200180546001600160a01b0319163317905583516200311b90859083908110620030ff57620030ff620042cb565b60200260200101518660020154620026bd90919063ffffffff16565b60028601555b806200312d816200426a565b91505062002fc9565b505050826200317a5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b604482015260640162000728565b6000805b8251811015620031b857620031a1838281518110620024825762002482620042cb565b915080620031af816200426a565b9150506200317e565b50620031c6816002620026af565b6002840154620031d8906003620026af565b10620032185760008c815260208890526040902054620031fa906001620040d1565b60008d815260208990526040902055506001935062002c6a92505050565b5060009b9a5050505050505050505050565b6000806001548314156200324057504662001ce9565b5090919050565b600062001e43828462004114565b6060816200327a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620032aa578062003291816200426a565b9150620032a29050600a8362004114565b91506200327e565b6000816001600160401b03811115620032c757620032c7620042e1565b6040519080825280601f01601f191660200182016040528015620032f2576020820181803683370190505b5090505b8415620028d5576200330a600183620041aa565b915062003319600a8662004288565b62003326906030620040d1565b60f81b8183815181106200333e576200333e620042cb565b60200101906001600160f81b031916908160001a90535062003362600a8662004114565b9450620032f6565b6000604160f81b6001600160f81b0319831610801590620033995750602d60f91b6001600160f81b0319831611155b15620033b957620033b060f883901c6020620040ec565b60f81b92915050565b5090565b611113806200432183390190565b828054620033d99062004233565b90600052602060002090601f016020900481019282620033fd576000855562003448565b82601f106200341857805160ff191683800117855562003448565b8280016001018555821562003448579182015b82811115620034485782518255916020019190600101906200342b565b50620033b99291505b80821115620033b9576000815560010162003451565b80356200347481620042f7565b919050565b600082601f8301126200348b57600080fd5b81516020620034a46200349e8362004053565b62004020565b80838252828201915082860187848660051b8901011115620034c557600080fd5b60005b85811015620034e657815184529284019290840190600101620034c8565b5090979650505050505050565b805180151581146200347457600080fd5b600082601f8301126200351657600080fd5b8135620035276200349e8262004079565b8181528460208386010111156200353d57600080fd5b816020850160208301376000918101602001919091529392505050565b8035620034748162004310565b6000602082840312156200357a57600080fd5b813562001e4381620042f7565b6000602082840312156200359a57600080fd5b815162001e4381620042f7565b600080600060608486031215620035bd57600080fd5b8335620035ca81620042f7565b92506020840135620035dc81620042f7565b929592945050506040919091013590565b600080604083850312156200360157600080fd5b82516001600160401b03808211156200361957600080fd5b818501915085601f8301126200362e57600080fd5b81516020620036416200349e8362004053565b8083825282820191508286018a848660051b89010111156200366257600080fd5b600096505b84871015620036925780516200367d81620042f7565b83526001969096019591830191830162003667565b5091880151919650909350505080821115620036ad57600080fd5b50620036bc8582860162003479565b9150509250929050565b600060208284031215620036d957600080fd5b62001e4382620034f3565b600060208284031215620036f757600080fd5b81356001600160401b038111156200370e57600080fd5b620028d58482850162003504565b6000602082840312156200372f57600080fd5b81516001600160401b038111156200374657600080fd5b8201601f810184136200375857600080fd5b8051620037696200349e8262004079565b8181528560208385010111156200377f57600080fd5b62003792826020830160208601620041ea565b95945050505050565b600080600080600080600080610100898b031215620037b957600080fd5b88356001600160401b0380821115620037d157600080fd5b620037df8c838d0162003504565b995060208b0135915080821115620037f657600080fd5b620038048c838d0162003504565b985060408b01359150808211156200381b57600080fd5b506200382a8b828c0162003504565b9650506200383b60608a016200355a565b94506200384b60808a0162003467565b979a969950949793969560a0850135955060c08501359460e001359350915050565b6000806000606084860312156200388357600080fd5b83356001600160401b038111156200389a57600080fd5b620038a88682870162003504565b9660208601359650604090950135949350505050565b600060208284031215620038d157600080fd5b5035919050565b600060208284031215620038eb57600080fd5b5051919050565b600080604083850312156200390657600080fd5b8235915060208301356200391a81620042f7565b809150509250929050565b600080600080608085870312156200393c57600080fd5b8435935060208501356200395081620042f7565b925060408501356200396281620042f7565b9396929550929360600135925050565b600080604083850312156200398657600080fd5b825191506200399860208401620034f3565b90509250929050565b60008060408385031215620039b557600080fd5b50508035926020909101359150565b60008060008060008060c08789031215620039de57600080fd5b8635955060208701356001600160401b03811115620039fc57600080fd5b62003a0a89828a0162003504565b955050604087013562003a1d81620042f7565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121562003a5157600080fd5b815162001e438162004310565b6000815180845262003a78816020860160208601620041ea565b601f01601f19169290920160200192915050565b6000825162003aa0818460208701620041ea565b9190910192915050565b6000825162003abe818460208701620041ea565b67102b37bab1b432b960c11b920191825250600801919050565b6000845162003aec818460208901620041ea565b8083019050602f60f81b808252855162003b0e816001850160208a01620041ea565b6001920191820152835162003b2b816002840160208801620041ea565b0160020195945050505050565b603b60f91b81526000825162003b56816001850160208701620041ea565b9190910160010192915050565b898152600060208a5162003b7d81838601848f01620041ea565b8a519084019062003b9481848401858f01620041ea565b8a5191019062003baa81848401858e01620041ea565b60f89990991b6001600160f81b031916980190810197909752505060609390931b6001600160601b0319166021850152603584019190915260558301526075820152609501949350505050565b8681526000865162003c11816020850160208b01620041ea565b602092019182019590955260609390931b6001600160601b0319166040840152605483019190915260748201526094019392505050565b8481526000845162003c62816020850160208901620041ea565b909101602081019390935250604082015260600192915050565b6001600160a01b038616815260a06020820181905260009062003ca29083018762003a5e565b828103604084015262003cb6818762003a5e565b9050828103606084015262003ccc818662003a5e565b91505060ff831660808301529695505050505050565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b8281101562003d3f5781516001600160a01b03168452928401929084019060010162003d18565b5050508381038285015284518082528583019183019060005b81811015620034e65783518352928401929184019160010162003d58565b60208152600062001e43602083018462003a5e565b60a08152600062003da060a083018862003a5e565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b60c08152600062003de260c083018962003a5e565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b600061012080835262003e2d8184018d62003a5e565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905283810360a0850152905062003e68818862003a5e565b905082810360c084015262003e7e818762003a5e565b60ff9590951660e084015250506101000152979650505050505050565b60a08152600062003eb060a083018862003a5e565b6001600160a01b039690961660208301525060408101939093526060830191909152608090910152919050565b60408152600062003ef2604083018562003a5e565b905082151560208301529392505050565b6020808252601b908201527f63616e6e6f742073656e6420746f207a65726f20616464726573730000000000604082015260600190565b60208082526045908201527f6e6f7420656e6f75676820544675656c20286d73672e76616c75652920746f2060408201527f636f766572207468652063726f73732d636861696e207472616e73616374696f6060820152646e2066656560d81b608082015260a00190565b60208082526024908201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604082015263656e6f6d60e01b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f191681016001600160401b03811182821017156200404b576200404b620042e1565b604052919050565b60006001600160401b038211156200406f576200406f620042e1565b5060051b60200190565b60006001600160401b03821115620040955762004095620042e1565b50601f01601f191660200190565b60006001600160a01b03828116848216808303821115620040c857620040c86200429f565b01949350505050565b60008219821115620040e757620040e76200429f565b500190565b600060ff821660ff84168060ff038211156200410c576200410c6200429f565b019392505050565b600082620041265762004126620042b5565b500490565b60006001600160a01b03828116848216811515828404821116156200415457620041546200429f565b02949350505050565b60008160001904831182151516156200417a576200417a6200429f565b500290565b60006001600160a01b0383811690831681811015620041a257620041a26200429f565b039392505050565b600082821015620041bf57620041bf6200429f565b500390565b600060ff821660ff841680821015620041e157620041e16200429f565b90039392505050565b60005b8381101562004207578181015183820152602001620041ed565b838111156200214e5750506000910152565b6000816200422b576200422b6200429f565b506000190190565b600181811c908216806200424857607f821691505b6020821081141562001cd657634e487b7160e01b600052602260045260246000fd5b60006000198214156200428157620042816200429f565b5060010190565b6000826200429a576200429a620042b5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200430d57600080fd5b50565b60ff811681146200430d57600080fdfe60806040523480156200001157600080fd5b50604051620011133803806200111383398101604081905262000034916200021b565b84838381600390805190602001906200004f929190620000be565b50805162000065906004906020840190620000be565b5050600580546001600160a01b0319166001600160a01b0393909316929092179091555083516200009e906006906020870190620000be565b506007805460ff191660ff92909216919091179055506200033c92505050565b828054620000cc90620002e9565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b600082601f8301126200017657600080fd5b81516001600160401b038082111562000193576200019362000326565b604051601f8301601f19908116603f01168101908282118183101715620001be57620001be62000326565b81604052838152602092508683858801011115620001db57600080fd5b600091505b83821015620001ff5785820183015181830184015290820190620001e0565b83821115620002115760008385830101525b9695505050505050565b600080600080600060a086880312156200023457600080fd5b85516001600160a01b03811681146200024c57600080fd5b60208701519095506001600160401b03808211156200026a57600080fd5b6200027889838a0162000164565b955060408801519150808211156200028f57600080fd5b6200029d89838a0162000164565b94506060880151915080821115620002b457600080fd5b50620002c38882890162000164565b925050608086015160ff81168114620002db57600080fd5b809150509295509295909350565b600181811c90821680620002fe57607f821691505b602082108114156200032057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dc7806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106100e05760003560e01c8063880cdc3111610087578063880cdc31146101b15780638da5cb5b146101c457806395d89b41146101ef5780639dc29fac146101f7578063a457c2d71461020a578063a9059cbb1461021d578063c370b04214610230578063dd62ed3e1461023857600080fd5b806306fdde03146100e5578063095ea7b31461010357806318160ddd1461012657806323b872dd14610138578063313ce5671461014b578063395093511461016057806340c10f191461017357806370a0823114610188575b600080fd5b6100ed61024b565b6040516100fa9190610c65565b60405180910390f35b610116610111366004610c3b565b6102dd565b60405190151581526020016100fa565b6002545b6040519081526020016100fa565b610116610146366004610bff565b6102f5565b60075460405160ff90911681526020016100fa565b61011661016e366004610c3b565b610319565b610186610181366004610c3b565b61033b565b005b61012a610196366004610baa565b6001600160a01b031660009081526020819052604090205490565b6101866101bf366004610baa565b61037c565b6005546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020016100fa565b6100ed61040f565b610186610205366004610c3b565b61041e565b610116610218366004610c3b565b61056f565b61011661022b366004610c3b565b6105ea565b6100ed6105f8565b61012a610246366004610bcc565b610607565b60606003805461025a90610d20565b80601f016020809104026020016040519081016040528092919081815260200182805461028690610d20565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b5050505050905090565b6000336102eb818585610632565b5060019392505050565b600033610303858285610757565b61030e8585856107d1565b506001949350505050565b6000336102eb81858561032c8383610607565b6103369190610cf1565b610632565b6005546001600160a01b0316331461036e5760405162461bcd60e51b815260040161036590610cba565b60405180910390fd5b610378828261098d565b5050565b6005546001600160a01b031633146103a65760405162461bcd60e51b815260040161036590610cba565b600554604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606004805461025a90610d20565b6005546001600160a01b031633146104485760405162461bcd60e51b815260040161036590610cba565b6001600160a01b038216600090815260208190526040902054818110156104cc5760405162461bcd60e51b815260206004820152603260248201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560448201527133b4103130b630b731b2903a3790313ab93760711b6064820152608401610365565b6005546001600160a01b031660006104e48583610607565b9050838110156105535760405162461bcd60e51b815260206004820152603460248201527f566f7563686572206f776e657220646964206e6f7420617070726f76656420656044820152733737bab3b41030b6b7bab73a103a3790313ab93760611b6064820152608401610365565b61055e858386610757565b6105688585610a5a565b5050505050565b6000338161057d8286610607565b9050838110156105dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610365565b61030e8286868403610632565b6000336102eb8185856107d1565b60606006805461025a90610d20565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106945760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610365565b6001600160a01b0382166106f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610365565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107638484610607565b905060001981146107cb57818110156107be5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610365565b6107cb8484848403610632565b50505050565b6001600160a01b0383166108355760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610365565b6001600160a01b0382166108975760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610365565b6001600160a01b0383166000908152602081905260409020548181101561090f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610365565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610946908490610cf1565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610d728339815191528460405161098091815260200190565b60405180910390a36107cb565b6001600160a01b0382166109e35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610365565b80600260008282546109f59190610cf1565b90915550506001600160a01b03821660009081526020819052604081208054839290610a22908490610cf1565b90915550506040518181526001600160a01b03831690600090600080516020610d728339815191529060200160405180910390a35050565b6001600160a01b038216610aba5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610365565b6001600160a01b03821660009081526020819052604090205481811015610b2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610365565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b5d908490610d09565b90915550506040518281526000906001600160a01b03851690600080516020610d728339815191529060200161074a565b80356001600160a01b0381168114610ba557600080fd5b919050565b600060208284031215610bbc57600080fd5b610bc582610b8e565b9392505050565b60008060408385031215610bdf57600080fd5b610be883610b8e565b9150610bf660208401610b8e565b90509250929050565b600080600060608486031215610c1457600080fd5b610c1d84610b8e565b9250610c2b60208501610b8e565b9150604084013590509250925092565b60008060408385031215610c4e57600080fd5b610c5783610b8e565b946020939093013593505050565b600060208083528351808285015260005b81811015610c9257858101830151858201604001528201610c76565b81811115610ca4576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60008219821115610d0457610d04610d5b565b500190565b600082821015610d1b57610d1b610d5b565b500390565b600181811c90821680610d3457607f821691505b60208210811415610d5557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b1c79808962109981ebfd729e6a07dad691ab187e42a36b073d5d534d9a39d6164736f6c63430008070033a26469706673582212209a6893f36f044d7ac4638c44e184bbcb769de157f6811844f0e0e07bdb81487d64736f6c63430008070033",
}

// TNT20TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT20TokenBankMetaData.ABI instead.
var TNT20TokenBankABI = TNT20TokenBankMetaData.ABI

// TNT20TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT20TokenBankMetaData.Bin instead.
var TNT20TokenBankBin = TNT20TokenBankMetaData.Bin

// DeployTNT20TokenBank deploys a new Ethereum contract, binding an instance of TNT20TokenBank to it.
func DeployTNT20TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT20TokenBank, error) {
	parsed, err := TNT20TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT20TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT20TokenBank{TNT20TokenBankCaller: TNT20TokenBankCaller{contract: contract}, TNT20TokenBankTransactor: TNT20TokenBankTransactor{contract: contract}, TNT20TokenBankFilterer: TNT20TokenBankFilterer{contract: contract}}, nil
}

// TNT20TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT20TokenBank struct {
	TNT20TokenBankCaller     // Read-only binding to the contract
	TNT20TokenBankTransactor // Write-only binding to the contract
	TNT20TokenBankFilterer   // Log filterer for contract events
}

// TNT20TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT20TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT20TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT20TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT20TokenBankSession struct {
	Contract     *TNT20TokenBank   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT20TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT20TokenBankCallerSession struct {
	Contract *TNT20TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TNT20TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT20TokenBankTransactorSession struct {
	Contract     *TNT20TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TNT20TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT20TokenBankRaw struct {
	Contract *TNT20TokenBank // Generic contract binding to access the raw methods on
}

// TNT20TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT20TokenBankCallerRaw struct {
	Contract *TNT20TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT20TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT20TokenBankTransactorRaw struct {
	Contract *TNT20TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT20TokenBank creates a new instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBank(address common.Address, backend bind.ContractBackend) (*TNT20TokenBank, error) {
	contract, err := bindTNT20TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBank{TNT20TokenBankCaller: TNT20TokenBankCaller{contract: contract}, TNT20TokenBankTransactor: TNT20TokenBankTransactor{contract: contract}, TNT20TokenBankFilterer: TNT20TokenBankFilterer{contract: contract}}, nil
}

// NewTNT20TokenBankCaller creates a new read-only instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT20TokenBankCaller, error) {
	contract, err := bindTNT20TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankCaller{contract: contract}, nil
}

// NewTNT20TokenBankTransactor creates a new write-only instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT20TokenBankTransactor, error) {
	contract, err := bindTNT20TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTransactor{contract: contract}, nil
}

// NewTNT20TokenBankFilterer creates a new log filterer instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT20TokenBankFilterer, error) {
	contract, err := bindTNT20TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFilterer{contract: contract}, nil
}

// bindTNT20TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT20TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT20TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT20TokenBank *TNT20TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT20TokenBank.Contract.TNT20TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT20TokenBank *TNT20TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.TNT20TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT20TokenBank *TNT20TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.TNT20TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT20TokenBank *TNT20TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT20TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT20TokenBank *TNT20TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT20TokenBank *TNT20TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT20TokenBank.Contract.AllDenoms(&_TNT20TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT20TokenBank.Contract.AllDenoms(&_TNT20TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT20TokenBank.Contract.AllVouchers(&_TNT20TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT20TokenBank.Contract.AllVouchers(&_TNT20TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT20TokenBank.Contract.DenomToVoucherLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT20TokenBank.Contract.DenomToVoucherLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT20TokenBank.Contract.Exists(&_TNT20TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT20TokenBank.Contract.Exists(&_TNT20TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT20TokenBank.Contract.Exists0(&_TNT20TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT20TokenBank.Contract.Exists0(&_TNT20TokenBank.CallOpts, voucherAddress)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetAdjustedValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getAdjustedValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT20TokenBank *TNT20TokenBankSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT20TokenBank.Contract.GetAdjustedValidatorSet(&_TNT20TokenBank.CallOpts, subchainID, dynasty)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT20TokenBank.Contract.GetAdjustedValidatorSet(&_TNT20TokenBank.CallOpts, subchainID, dynasty)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT20TokenBank.Contract.GetDenom(&_TNT20TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT20TokenBank.Contract.GetDenom(&_TNT20TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetTokenLockEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getTokenLockEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetTokenLockEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetTokenLockEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT20TokenBank.Contract.GetVoucher(&_TNT20TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT20TokenBank.Contract.GetVoucher(&_TNT20TokenBank.CallOpts, denom)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetVoucherBurnEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getVoucherBurnEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT20TokenBank.Contract.MainchainID(&_TNT20TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT20TokenBank.Contract.MainchainID(&_TNT20TokenBank.CallOpts)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenLockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenLockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.TokenLockVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.TokenLockVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenUnlockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenUnlockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x3f1a8aa8.
//
// Solidity: function totalLockedAmounts(uint256 , address ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x3f1a8aa8.
//
// Solidity: function totalLockedAmounts(uint256 , address ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TotalLockedAmounts(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x3f1a8aa8.
//
// Solidity: function totalLockedAmounts(uint256 , address ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TotalLockedAmounts(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT20TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT20TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherBurnNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherBurnNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.VoucherBurnVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.VoucherBurnVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherMintNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherMintNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.BurnVouchers(&_TNT20TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.BurnVouchers(&_TNT20TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// ForceIncrementMaxProcessedTokenLockNonce is a paid mutator transaction binding the contract method 0xb4baab85.
//
// Solidity: function forceIncrementMaxProcessedTokenLockNonce(string denom, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) ForceIncrementMaxProcessedTokenLockNonce(opts *bind.TransactOpts, denom string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "forceIncrementMaxProcessedTokenLockNonce", denom, dynasty, sourceChainTokenLockNonce)
}

// ForceIncrementMaxProcessedTokenLockNonce is a paid mutator transaction binding the contract method 0xb4baab85.
//
// Solidity: function forceIncrementMaxProcessedTokenLockNonce(string denom, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) ForceIncrementMaxProcessedTokenLockNonce(denom string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.ForceIncrementMaxProcessedTokenLockNonce(&_TNT20TokenBank.TransactOpts, denom, dynasty, sourceChainTokenLockNonce)
}

// ForceIncrementMaxProcessedTokenLockNonce is a paid mutator transaction binding the contract method 0xb4baab85.
//
// Solidity: function forceIncrementMaxProcessedTokenLockNonce(string denom, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) ForceIncrementMaxProcessedTokenLockNonce(denom string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.ForceIncrementMaxProcessedTokenLockNonce(&_TNT20TokenBank.TransactOpts, denom, dynasty, sourceChainTokenLockNonce)
}

// ForceIncrementMaxProcessedVoucherBurnNonce is a paid mutator transaction binding the contract method 0x060cb552.
//
// Solidity: function forceIncrementMaxProcessedVoucherBurnNonce(string denom, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) ForceIncrementMaxProcessedVoucherBurnNonce(opts *bind.TransactOpts, denom string, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "forceIncrementMaxProcessedVoucherBurnNonce", denom, dynasty, sourceChainVoucherBurnNonce)
}

// ForceIncrementMaxProcessedVoucherBurnNonce is a paid mutator transaction binding the contract method 0x060cb552.
//
// Solidity: function forceIncrementMaxProcessedVoucherBurnNonce(string denom, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) ForceIncrementMaxProcessedVoucherBurnNonce(denom string, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.ForceIncrementMaxProcessedVoucherBurnNonce(&_TNT20TokenBank.TransactOpts, denom, dynasty, sourceChainVoucherBurnNonce)
}

// ForceIncrementMaxProcessedVoucherBurnNonce is a paid mutator transaction binding the contract method 0x060cb552.
//
// Solidity: function forceIncrementMaxProcessedVoucherBurnNonce(string denom, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) ForceIncrementMaxProcessedVoucherBurnNonce(denom string, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.ForceIncrementMaxProcessedVoucherBurnNonce(&_TNT20TokenBank.TransactOpts, denom, dynasty, sourceChainVoucherBurnNonce)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.LockTokens(&_TNT20TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.LockTokens(&_TNT20TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "mintVouchers", denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) MintVouchers(denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.MintVouchers(&_TNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) MintVouchers(denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.MintVouchers(&_TNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.UnlockTokens(&_TNT20TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.UnlockTokens(&_TNT20TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// TNT20TokenBankFailedToSendTFuelIterator is returned from FilterFailedToSendTFuel and is used to iterate over the raw logs and unpacked data for FailedToSendTFuel events raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToSendTFuelIterator struct {
	Event *TNT20TokenBankFailedToSendTFuel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankFailedToSendTFuelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankFailedToSendTFuel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankFailedToSendTFuel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankFailedToSendTFuelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankFailedToSendTFuelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankFailedToSendTFuel represents a FailedToSendTFuel event raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToSendTFuel struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterFailedToSendTFuel is a free log retrieval operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterFailedToSendTFuel(opts *bind.FilterOpts, receiver []common.Address) (*TNT20TokenBankFailedToSendTFuelIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFailedToSendTFuelIterator{contract: _TNT20TokenBank.contract, event: "FailedToSendTFuel", logs: logs, sub: sub}, nil
}

// WatchFailedToSendTFuel is a free log subscription operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchFailedToSendTFuel(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankFailedToSendTFuel, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankFailedToSendTFuel)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedToSendTFuel is a log parse operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseFailedToSendTFuel(log types.Log) (*TNT20TokenBankFailedToSendTFuel, error) {
	event := new(TNT20TokenBankFailedToSendTFuel)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20TokenLockedIterator is returned from FilterTNT20TokenLocked and is used to iterate over the raw logs and unpacked data for TNT20TokenLocked events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenLockedIterator struct {
	Event *TNT20TokenBankTNT20TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20TokenLocked represents a TNT20TokenLocked event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	LockedAmount               *big.Int
	Name                       string
	Symbol                     string
	Decimals                   uint8
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT20TokenLocked is a free log retrieval operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimals, uint256 tokenLockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20TokenLocked(opts *bind.FilterOpts) (*TNT20TokenBankTNT20TokenLockedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20TokenLockedIterator{contract: _TNT20TokenBank.contract, event: "TNT20TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT20TokenLocked is a free log subscription operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimals, uint256 tokenLockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20TokenLocked)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20TokenLocked is a log parse operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimals, uint256 tokenLockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20TokenLocked(log types.Log) (*TNT20TokenBankTNT20TokenLocked, error) {
	event := new(TNT20TokenBankTNT20TokenLocked)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20TokenUnlockedIterator is returned from FilterTNT20TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT20TokenUnlocked events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenUnlockedIterator struct {
	Event *TNT20TokenBankTNT20TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20TokenUnlocked represents a TNT20TokenUnlocked event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	UnlockedAmount              *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT20TokenUnlocked is a free log retrieval operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20TokenUnlocked(opts *bind.FilterOpts) (*TNT20TokenBankTNT20TokenUnlockedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20TokenUnlockedIterator{contract: _TNT20TokenBank.contract, event: "TNT20TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT20TokenUnlocked is a free log subscription operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20TokenUnlocked)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20TokenUnlocked is a log parse operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20TokenUnlocked(log types.Log) (*TNT20TokenBankTNT20TokenUnlocked, error) {
	event := new(TNT20TokenBankTNT20TokenUnlocked)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20VoucherBurnedIterator is returned from FilterTNT20VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT20VoucherBurned events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherBurnedIterator struct {
	Event *TNT20TokenBankTNT20VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20VoucherBurned represents a TNT20VoucherBurned event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	BurnedAmount             *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT20VoucherBurned is a free log retrieval operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20VoucherBurned(opts *bind.FilterOpts) (*TNT20TokenBankTNT20VoucherBurnedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20VoucherBurnedIterator{contract: _TNT20TokenBank.contract, event: "TNT20VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT20VoucherBurned is a free log subscription operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20VoucherBurned)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20VoucherBurned is a log parse operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20VoucherBurned(log types.Log) (*TNT20TokenBankTNT20VoucherBurned, error) {
	event := new(TNT20TokenBankTNT20VoucherBurned)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20VoucherMintedIterator is returned from FilterTNT20VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT20VoucherMinted events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherMintedIterator struct {
	Event *TNT20TokenBankTNT20VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20VoucherMinted represents a TNT20VoucherMinted event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	MintedAmount               *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT20VoucherMinted is a free log retrieval operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20VoucherMinted(opts *bind.FilterOpts) (*TNT20TokenBankTNT20VoucherMintedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20VoucherMintedIterator{contract: _TNT20TokenBank.contract, event: "TNT20VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT20VoucherMinted is a free log subscription operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20VoucherMinted)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20VoucherMinted is a log parse operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20VoucherMinted(log types.Log) (*TNT20TokenBankTNT20VoucherMinted, error) {
	event := new(TNT20TokenBankTNT20VoucherMinted)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
